// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// Giveaway is an object representing the database table.
type Giveaway struct {
	MessageID         int64            `boil:"message_id" json:"message_id" toml:"message_id" yaml:"message_id"`
	GuildID           int64            `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	ChannelID         int64            `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	Author            int64            `boil:"author" json:"author" toml:"author" yaml:"author"`
	Description       string           `boil:"description" json:"description" toml:"description" yaml:"description"`
	NumWinners        int              `boil:"num_winners" json:"num_winners" toml:"num_winners" yaml:"num_winners"`
	ReactEmojiID      int64            `boil:"react_emoji_id" json:"react_emoji_id" toml:"react_emoji_id" yaml:"react_emoji_id"`
	ReactEmojiUnicode string           `boil:"react_emoji_unicode" json:"react_emoji_unicode" toml:"react_emoji_unicode" yaml:"react_emoji_unicode"`
	CreatedAt         time.Time        `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	EndsAt            time.Time        `boil:"ends_at" json:"ends_at" toml:"ends_at" yaml:"ends_at"`
	EndedAt           null.Time        `boil:"ended_at" json:"ended_at,omitempty" toml:"ended_at" yaml:"ended_at,omitempty"`
	Winners           types.Int64Array `boil:"winners" json:"winners,omitempty" toml:"winners" yaml:"winners,omitempty"`
	Color             int              `boil:"color" json:"color" toml:"color" yaml:"color"`

	R *giveawayR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L giveawayL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GiveawayColumns = struct {
	MessageID         string
	GuildID           string
	ChannelID         string
	Author            string
	Description       string
	NumWinners        string
	ReactEmojiID      string
	ReactEmojiUnicode string
	CreatedAt         string
	EndsAt            string
	EndedAt           string
	Winners           string
	Color             string
}{
	MessageID:         "message_id",
	GuildID:           "guild_id",
	ChannelID:         "channel_id",
	Author:            "author",
	Description:       "description",
	NumWinners:        "num_winners",
	ReactEmojiID:      "react_emoji_id",
	ReactEmojiUnicode: "react_emoji_unicode",
	CreatedAt:         "created_at",
	EndsAt:            "ends_at",
	EndedAt:           "ended_at",
	Winners:           "winners",
	Color:             "color",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_Int64Array struct{ field string }

func (w whereHelpertypes_Int64Array) EQ(x types.Int64Array) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_Int64Array) NEQ(x types.Int64Array) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_Int64Array) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_Int64Array) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpertypes_Int64Array) LT(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Int64Array) LTE(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Int64Array) GT(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Int64Array) GTE(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var GiveawayWhere = struct {
	MessageID         whereHelperint64
	GuildID           whereHelperint64
	ChannelID         whereHelperint64
	Author            whereHelperint64
	Description       whereHelperstring
	NumWinners        whereHelperint
	ReactEmojiID      whereHelperint64
	ReactEmojiUnicode whereHelperstring
	CreatedAt         whereHelpertime_Time
	EndsAt            whereHelpertime_Time
	EndedAt           whereHelpernull_Time
	Winners           whereHelpertypes_Int64Array
	Color             whereHelperint
}{
	MessageID:         whereHelperint64{field: `message_id`},
	GuildID:           whereHelperint64{field: `guild_id`},
	ChannelID:         whereHelperint64{field: `channel_id`},
	Author:            whereHelperint64{field: `author`},
	Description:       whereHelperstring{field: `description`},
	NumWinners:        whereHelperint{field: `num_winners`},
	ReactEmojiID:      whereHelperint64{field: `react_emoji_id`},
	ReactEmojiUnicode: whereHelperstring{field: `react_emoji_unicode`},
	CreatedAt:         whereHelpertime_Time{field: `created_at`},
	EndsAt:            whereHelpertime_Time{field: `ends_at`},
	EndedAt:           whereHelpernull_Time{field: `ended_at`},
	Winners:           whereHelpertypes_Int64Array{field: `winners`},
	Color:             whereHelperint{field: `color`},
}

// GiveawayRels is where relationship names are stored.
var GiveawayRels = struct {
}{}

// giveawayR is where relationships are stored.
type giveawayR struct {
}

// NewStruct creates a new relationship struct
func (*giveawayR) NewStruct() *giveawayR {
	return &giveawayR{}
}

// giveawayL is where Load methods for each relationship are stored.
type giveawayL struct{}

var (
	giveawayColumns               = []string{"message_id", "guild_id", "channel_id", "author", "description", "num_winners", "react_emoji_id", "react_emoji_unicode", "created_at", "ends_at", "ended_at", "winners", "color"}
	giveawayColumnsWithoutDefault = []string{"message_id", "guild_id", "channel_id", "author", "description", "num_winners", "react_emoji_id", "react_emoji_unicode", "created_at", "ends_at", "ended_at", "winners", "color"}
	giveawayColumnsWithDefault    = []string{}
	giveawayPrimaryKeyColumns     = []string{"message_id"}
)

type (
	// GiveawaySlice is an alias for a slice of pointers to Giveaway.
	// This should generally be used opposed to []Giveaway.
	GiveawaySlice []*Giveaway

	giveawayQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	giveawayType                 = reflect.TypeOf(&Giveaway{})
	giveawayMapping              = queries.MakeStructMapping(giveawayType)
	giveawayPrimaryKeyMapping, _ = queries.BindMapping(giveawayType, giveawayMapping, giveawayPrimaryKeyColumns)
	giveawayInsertCacheMut       sync.RWMutex
	giveawayInsertCache          = make(map[string]insertCache)
	giveawayUpdateCacheMut       sync.RWMutex
	giveawayUpdateCache          = make(map[string]updateCache)
	giveawayUpsertCacheMut       sync.RWMutex
	giveawayUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single giveaway record from the query using the global executor.
func (q giveawayQuery) OneG(ctx context.Context) (*Giveaway, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single giveaway record from the query.
func (q giveawayQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Giveaway, error) {
	o := &Giveaway{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for giveaways")
	}

	return o, nil
}

// AllG returns all Giveaway records from the query using the global executor.
func (q giveawayQuery) AllG(ctx context.Context) (GiveawaySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Giveaway records from the query.
func (q giveawayQuery) All(ctx context.Context, exec boil.ContextExecutor) (GiveawaySlice, error) {
	var o []*Giveaway

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Giveaway slice")
	}

	return o, nil
}

// CountG returns the count of all Giveaway records in the query, and panics on error.
func (q giveawayQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Giveaway records in the query.
func (q giveawayQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count giveaways rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q giveawayQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q giveawayQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if giveaways exists")
	}

	return count > 0, nil
}

// Giveaways retrieves all the records using an executor.
func Giveaways(mods ...qm.QueryMod) giveawayQuery {
	mods = append(mods, qm.From("\"giveaways\""))
	return giveawayQuery{NewQuery(mods...)}
}

// FindGiveawayG retrieves a single record by ID.
func FindGiveawayG(ctx context.Context, messageID int64, selectCols ...string) (*Giveaway, error) {
	return FindGiveaway(ctx, boil.GetContextDB(), messageID, selectCols...)
}

// FindGiveaway retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGiveaway(ctx context.Context, exec boil.ContextExecutor, messageID int64, selectCols ...string) (*Giveaway, error) {
	giveawayObj := &Giveaway{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"giveaways\" where \"message_id\"=$1", sel,
	)

	q := queries.Raw(query, messageID)

	err := q.Bind(ctx, exec, giveawayObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from giveaways")
	}

	return giveawayObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Giveaway) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Giveaway) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no giveaways provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(giveawayColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	giveawayInsertCacheMut.RLock()
	cache, cached := giveawayInsertCache[key]
	giveawayInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			giveawayColumns,
			giveawayColumnsWithDefault,
			giveawayColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(giveawayType, giveawayMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(giveawayType, giveawayMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"giveaways\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"giveaways\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into giveaways")
	}

	if !cached {
		giveawayInsertCacheMut.Lock()
		giveawayInsertCache[key] = cache
		giveawayInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Giveaway record using the global executor.
// See Update for more documentation.
func (o *Giveaway) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Giveaway.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Giveaway) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	giveawayUpdateCacheMut.RLock()
	cache, cached := giveawayUpdateCache[key]
	giveawayUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			giveawayColumns,
			giveawayPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update giveaways, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"giveaways\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, giveawayPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(giveawayType, giveawayMapping, append(wl, giveawayPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update giveaways row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for giveaways")
	}

	if !cached {
		giveawayUpdateCacheMut.Lock()
		giveawayUpdateCache[key] = cache
		giveawayUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q giveawayQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q giveawayQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for giveaways")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for giveaways")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o GiveawaySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GiveawaySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), giveawayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"giveaways\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, giveawayPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in giveaway slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all giveaway")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Giveaway) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Giveaway) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no giveaways provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(giveawayColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	giveawayUpsertCacheMut.RLock()
	cache, cached := giveawayUpsertCache[key]
	giveawayUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			giveawayColumns,
			giveawayColumnsWithDefault,
			giveawayColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			giveawayColumns,
			giveawayPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert giveaways, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(giveawayPrimaryKeyColumns))
			copy(conflict, giveawayPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"giveaways\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(giveawayType, giveawayMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(giveawayType, giveawayMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert giveaways")
	}

	if !cached {
		giveawayUpsertCacheMut.Lock()
		giveawayUpsertCache[key] = cache
		giveawayUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Giveaway record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Giveaway) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Giveaway record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Giveaway) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Giveaway provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), giveawayPrimaryKeyMapping)
	sql := "DELETE FROM \"giveaways\" WHERE \"message_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from giveaways")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for giveaways")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q giveawayQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no giveawayQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from giveaways")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for giveaways")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o GiveawaySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GiveawaySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Giveaway slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), giveawayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"giveaways\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, giveawayPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from giveaway slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for giveaways")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Giveaway) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Giveaway provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Giveaway) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGiveaway(ctx, exec, o.MessageID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GiveawaySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty GiveawaySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GiveawaySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GiveawaySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), giveawayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"giveaways\".* FROM \"giveaways\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, giveawayPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GiveawaySlice")
	}

	*o = slice

	return nil
}

// GiveawayExistsG checks if the Giveaway row exists.
func GiveawayExistsG(ctx context.Context, messageID int64) (bool, error) {
	return GiveawayExists(ctx, boil.GetContextDB(), messageID)
}

// GiveawayExists checks if the Giveaway row exists.
func GiveawayExists(ctx context.Context, exec boil.ContextExecutor, messageID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"giveaways\" where \"message_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, messageID)
	}

	row := exec.QueryRowContext(ctx, sql, messageID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if giveaways exists")
	}

	return exists, nil
}
